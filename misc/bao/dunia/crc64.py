CRC64_TABLE = [
            0x0000000000000000, 0x01B0000000000000, 0x0360000000000000, 0x02D0000000000000,
            0x06C0000000000000, 0x0770000000000000, 0x05A0000000000000, 0x0410000000000000,
            0x0D80000000000000, 0x0C30000000000000, 0x0EE0000000000000, 0x0F50000000000000,
            0x0B40000000000000, 0x0AF0000000000000, 0x0820000000000000, 0x0990000000000000,
            0x1B00000000000000, 0x1AB0000000000000, 0x1860000000000000, 0x19D0000000000000,
            0x1DC0000000000000, 0x1C70000000000000, 0x1EA0000000000000, 0x1F10000000000000,
            0x1680000000000000, 0x1730000000000000, 0x15E0000000000000, 0x1450000000000000,
            0x1040000000000000, 0x11F0000000000000, 0x1320000000000000, 0x1290000000000000,
            0x3600000000000000, 0x37B0000000000000, 0x3560000000000000, 0x34D0000000000000,
            0x30C0000000000000, 0x3170000000000000, 0x33A0000000000000, 0x3210000000000000,
            0x3B80000000000000, 0x3A30000000000000, 0x38E0000000000000, 0x3950000000000000,
            0x3D40000000000000, 0x3CF0000000000000, 0x3E20000000000000, 0x3F90000000000000,
            0x2D00000000000000, 0x2CB0000000000000, 0x2E60000000000000, 0x2FD0000000000000,
            0x2BC0000000000000, 0x2A70000000000000, 0x28A0000000000000, 0x2910000000000000,
            0x2080000000000000, 0x2130000000000000, 0x23E0000000000000, 0x2250000000000000,
            0x2640000000000000, 0x27F0000000000000, 0x2520000000000000, 0x2490000000000000,
            0x6C00000000000000, 0x6DB0000000000000, 0x6F60000000000000, 0x6ED0000000000000,
            0x6AC0000000000000, 0x6B70000000000000, 0x69A0000000000000, 0x6810000000000000,
            0x6180000000000000, 0x6030000000000000, 0x62E0000000000000, 0x6350000000000000,
            0x6740000000000000, 0x66F0000000000000, 0x6420000000000000, 0x6590000000000000,
            0x7700000000000000, 0x76B0000000000000, 0x7460000000000000, 0x75D0000000000000,
            0x71C0000000000000, 0x7070000000000000, 0x72A0000000000000, 0x7310000000000000,
            0x7A80000000000000, 0x7B30000000000000, 0x79E0000000000000, 0x7850000000000000,
            0x7C40000000000000, 0x7DF0000000000000, 0x7F20000000000000, 0x7E90000000000000,
            0x5A00000000000000, 0x5BB0000000000000, 0x5960000000000000, 0x58D0000000000000,
            0x5CC0000000000000, 0x5D70000000000000, 0x5FA0000000000000, 0x5E10000000000000,
            0x5780000000000000, 0x5630000000000000, 0x54E0000000000000, 0x5550000000000000,
            0x5140000000000000, 0x50F0000000000000, 0x5220000000000000, 0x5390000000000000,
            0x4100000000000000, 0x40B0000000000000, 0x4260000000000000, 0x43D0000000000000,
            0x47C0000000000000, 0x4670000000000000, 0x44A0000000000000, 0x4510000000000000,
            0x4C80000000000000, 0x4D30000000000000, 0x4FE0000000000000, 0x4E50000000000000,
            0x4A40000000000000, 0x4BF0000000000000, 0x4920000000000000, 0x4890000000000000,
            0xD800000000000000, 0xD9B0000000000000, 0xDB60000000000000, 0xDAD0000000000000,
            0xDEC0000000000000, 0xDF70000000000000, 0xDDA0000000000000, 0xDC10000000000000,
            0xD580000000000000, 0xD430000000000000, 0xD6E0000000000000, 0xD750000000000000,
            0xD340000000000000, 0xD2F0000000000000, 0xD020000000000000, 0xD190000000000000,
            0xC300000000000000, 0xC2B0000000000000, 0xC060000000000000, 0xC1D0000000000000,
            0xC5C0000000000000, 0xC470000000000000, 0xC6A0000000000000, 0xC710000000000000,
            0xCE80000000000000, 0xCF30000000000000, 0xCDE0000000000000, 0xCC50000000000000,
            0xC840000000000000, 0xC9F0000000000000, 0xCB20000000000000, 0xCA90000000000000,
            0xEE00000000000000, 0xEFB0000000000000, 0xED60000000000000, 0xECD0000000000000,
            0xE8C0000000000000, 0xE970000000000000, 0xEBA0000000000000, 0xEA10000000000000,
            0xE380000000000000, 0xE230000000000000, 0xE0E0000000000000, 0xE150000000000000,
            0xE540000000000000, 0xE4F0000000000000, 0xE620000000000000, 0xE790000000000000,
            0xF500000000000000, 0xF4B0000000000000, 0xF660000000000000, 0xF7D0000000000000,
            0xF3C0000000000000, 0xF270000000000000, 0xF0A0000000000000, 0xF110000000000000,
            0xF880000000000000, 0xF930000000000000, 0xFBE0000000000000, 0xFA50000000000000,
            0xFE40000000000000, 0xFFF0000000000000, 0xFD20000000000000, 0xFC90000000000000,
            0xB400000000000000, 0xB5B0000000000000, 0xB760000000000000, 0xB6D0000000000000,
            0xB2C0000000000000, 0xB370000000000000, 0xB1A0000000000000, 0xB010000000000000,
            0xB980000000000000, 0xB830000000000000, 0xBAE0000000000000, 0xBB50000000000000,
            0xBF40000000000000, 0xBEF0000000000000, 0xBC20000000000000, 0xBD90000000000000,
            0xAF00000000000000, 0xAEB0000000000000, 0xAC60000000000000, 0xADD0000000000000,
            0xA9C0000000000000, 0xA870000000000000, 0xAAA0000000000000, 0xAB10000000000000,
            0xA280000000000000, 0xA330000000000000, 0xA1E0000000000000, 0xA050000000000000,
            0xA440000000000000, 0xA5F0000000000000, 0xA720000000000000, 0xA690000000000000,
            0x8200000000000000, 0x83B0000000000000, 0x8160000000000000, 0x80D0000000000000,
            0x84C0000000000000, 0x8570000000000000, 0x87A0000000000000, 0x8610000000000000,
            0x8F80000000000000, 0x8E30000000000000, 0x8CE0000000000000, 0x8D50000000000000,
            0x8940000000000000, 0x88F0000000000000, 0x8A20000000000000, 0x8B90000000000000,
            0x9900000000000000, 0x98B0000000000000, 0x9A60000000000000, 0x9BD0000000000000,
            0x9FC0000000000000, 0x9E70000000000000, 0x9CA0000000000000, 0x9D10000000000000,
            0x9480000000000000, 0x9530000000000000, 0x97E0000000000000, 0x9650000000000000,
            0x9240000000000000, 0x93F0000000000000, 0x9120000000000000, 0x9090000000000000,
]

def crc64(data: bytes) -> int:
    crc = 0
    for b in data:
        crc = CRC64_TABLE[(crc ^ b) & 0xFF] ^ (crc >> 8)
    return crc

def crc64_string(s: str) -> str:
    data = s.encode('utf-8')
    result = crc64(data)
    return f"{result:016X}"  # Return as 16-digit uppercase hex

import sys

if __name__ == "__main__":
    names = sys.argv[1:]

    for name in names:
        text = "%s" % (name.lower())
        checksum = crc64_string(text)
        print(f"'{text}' = {checksum}")

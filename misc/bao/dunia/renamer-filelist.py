# uses a filelist to reverse Dunia names
# if filelist is not found tries to reverse variations of %08x.ext, which is most common
# see config below
import os, sys, argparse, pathlib

AUTOHASH_SOUNDS = True
AUTOHASH_NUMBER_MIN = 0x00100000
AUTOHASH_NUMBER_MAX = 0x00800000
AUTOHASH_ADD_SBAO = True
AUTOHASH_ADD_BAO = True
AUTOHASH_ADD_SPK = False
AUTOHASH_ADD_PREFIX = False #soundbinary\ or not (splinter cell: blacklist)
AUTOHASH_ADD_EXTRA_HASHES = False #games with implicit ids (far cry)


CRC32_TABLE = [
    0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA,
    0x076DC419, 0x706AF48F, 0xE963A535, 0x9E6495A3,
    0x0EDB8832, 0x79DCB8A4, 0xE0D5E91E, 0x97D2D988,
    0x09B64C2B, 0x7EB17CBD, 0xE7B82D07, 0x90BF1D91,
    0x1DB71064, 0x6AB020F2, 0xF3B97148, 0x84BE41DE,
    0x1ADAD47D, 0x6DDDE4EB, 0xF4D4B551, 0x83D385C7,
    0x136C9856, 0x646BA8C0, 0xFD62F97A, 0x8A65C9EC,
    0x14015C4F, 0x63066CD9, 0xFA0F3D63, 0x8D080DF5,
    0x3B6E20C8, 0x4C69105E, 0xD56041E4, 0xA2677172,
    0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B,
    0x35B5A8FA, 0x42B2986C, 0xDBBBC9D6, 0xACBCF940,
    0x32D86CE3, 0x45DF5C75, 0xDCD60DCF, 0xABD13D59,
    0x26D930AC, 0x51DE003A, 0xC8D75180, 0xBFD06116,
    0x21B4F4B5, 0x56B3C423, 0xCFBA9599, 0xB8BDA50F,
    0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924,
    0x2F6F7C87, 0x58684C11, 0xC1611DAB, 0xB6662D3D,
    0x76DC4190, 0x01DB7106, 0x98D220BC, 0xEFD5102A,
    0x71B18589, 0x06B6B51F, 0x9FBFE4A5, 0xE8B8D433,
    0x7807C9A2, 0x0F00F934, 0x9609A88E, 0xE10E9818,
    0x7F6A0DBB, 0x086D3D2D, 0x91646C97, 0xE6635C01,
    0x6B6B51F4, 0x1C6C6162, 0x856530D8, 0xF262004E,
    0x6C0695ED, 0x1B01A57B, 0x8208F4C1, 0xF50FC457,
    0x65B0D9C6, 0x12B7E950, 0x8BBEB8EA, 0xFCB9887C,
    0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3, 0xFBD44C65,
    0x4DB26158, 0x3AB551CE, 0xA3BC0074, 0xD4BB30E2,
    0x4ADFA541, 0x3DD895D7, 0xA4D1C46D, 0xD3D6F4FB,
    0x4369E96A, 0x346ED9FC, 0xAD678846, 0xDA60B8D0,
    0x44042D73, 0x33031DE5, 0xAA0A4C5F, 0xDD0D7CC9,
    0x5005713C, 0x270241AA, 0xBE0B1010, 0xC90C2086,
    0x5768B525, 0x206F85B3, 0xB966D409, 0xCE61E49F,
    0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4,
    0x59B33D17, 0x2EB40D81, 0xB7BD5C3B, 0xC0BA6CAD,
    0xEDB88320, 0x9ABFB3B6, 0x03B6E20C, 0x74B1D29A,
    0xEAD54739, 0x9DD277AF, 0x04DB2615, 0x73DC1683,
    0xE3630B12, 0x94643B84, 0x0D6D6A3E, 0x7A6A5AA8,
    0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1,
    0xF00F9344, 0x8708A3D2, 0x1E01F268, 0x6906C2FE,
    0xF762575D, 0x806567CB, 0x196C3671, 0x6E6B06E7,
    0xFED41B76, 0x89D32BE0, 0x10DA7A5A, 0x67DD4ACC,
    0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5,
    0xD6D6A3E8, 0xA1D1937E, 0x38D8C2C4, 0x4FDFF252,
    0xD1BB67F1, 0xA6BC5767, 0x3FB506DD, 0x48B2364B,
    0xD80D2BDA, 0xAF0A1B4C, 0x36034AF6, 0x41047A60,
    0xDF60EFC3, 0xA867DF55, 0x316E8EEF, 0x4669BE79,
    0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236,
    0xCC0C7795, 0xBB0B4703, 0x220216B9, 0x5505262F,
    0xC5BA3BBE, 0xB2BD0B28, 0x2BB45A92, 0x5CB36A04,
    0xC2D7FFA7, 0xB5D0CF31, 0x2CD99E8B, 0x5BDEAE1D,
    0x9B64C2B0, 0xEC63F226, 0x756AA39C, 0x026D930A,
    0x9C0906A9, 0xEB0E363F, 0x72076785, 0x05005713,
    0x95BF4A82, 0xE2B87A14, 0x7BB12BAE, 0x0CB61B38,
    0x92D28E9B, 0xE5D5BE0D, 0x7CDCEFB7, 0x0BDBDF21,
    0x86D3D2D4, 0xF1D4E242, 0x68DDB3F8, 0x1FDA836E,
    0x81BE16CD, 0xF6B9265B, 0x6FB077E1, 0x18B74777,
    0x88085AE6, 0xFF0F6A70, 0x66063BCA, 0x11010B5C,
    0x8F659EFF, 0xF862AE69, 0x616BFFD3, 0x166CCF45,
    0xA00AE278, 0xD70DD2EE, 0x4E048354, 0x3903B3C2,
    0xA7672661, 0xD06016F7, 0x4969474D, 0x3E6E77DB,
    0xAED16A4A, 0xD9D65ADC, 0x40DF0B66, 0x37D83BF0,
    0xA9BCAE53, 0xDEBB9EC5, 0x47B2CF7F, 0x30B5FFE9,
    0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6,
    0xBAD03605, 0xCDD70693, 0x54DE5729, 0x23D967BF,
    0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94,
    0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D,
]

def crc32(data: bytes) -> int:
    crc = 0xFFFFFFFF
    for b in data:
        crc = CRC32_TABLE[(crc ^ b) & 0xFF] ^ (crc >> 8)
    return ~crc & 0xFFFFFFFF

def crc32_string(s: str) -> str:
    data = s.encode('utf-8')
    result = crc32(data)
    return f"{result:08x}"


CRC64_TABLE = [
    0x0000000000000000, 0x01B0000000000000, 0x0360000000000000, 0x02D0000000000000,
    0x06C0000000000000, 0x0770000000000000, 0x05A0000000000000, 0x0410000000000000,
    0x0D80000000000000, 0x0C30000000000000, 0x0EE0000000000000, 0x0F50000000000000,
    0x0B40000000000000, 0x0AF0000000000000, 0x0820000000000000, 0x0990000000000000,
    0x1B00000000000000, 0x1AB0000000000000, 0x1860000000000000, 0x19D0000000000000,
    0x1DC0000000000000, 0x1C70000000000000, 0x1EA0000000000000, 0x1F10000000000000,
    0x1680000000000000, 0x1730000000000000, 0x15E0000000000000, 0x1450000000000000,
    0x1040000000000000, 0x11F0000000000000, 0x1320000000000000, 0x1290000000000000,
    0x3600000000000000, 0x37B0000000000000, 0x3560000000000000, 0x34D0000000000000,
    0x30C0000000000000, 0x3170000000000000, 0x33A0000000000000, 0x3210000000000000,
    0x3B80000000000000, 0x3A30000000000000, 0x38E0000000000000, 0x3950000000000000,
    0x3D40000000000000, 0x3CF0000000000000, 0x3E20000000000000, 0x3F90000000000000,
    0x2D00000000000000, 0x2CB0000000000000, 0x2E60000000000000, 0x2FD0000000000000,
    0x2BC0000000000000, 0x2A70000000000000, 0x28A0000000000000, 0x2910000000000000,
    0x2080000000000000, 0x2130000000000000, 0x23E0000000000000, 0x2250000000000000,
    0x2640000000000000, 0x27F0000000000000, 0x2520000000000000, 0x2490000000000000,
    0x6C00000000000000, 0x6DB0000000000000, 0x6F60000000000000, 0x6ED0000000000000,
    0x6AC0000000000000, 0x6B70000000000000, 0x69A0000000000000, 0x6810000000000000,
    0x6180000000000000, 0x6030000000000000, 0x62E0000000000000, 0x6350000000000000,
    0x6740000000000000, 0x66F0000000000000, 0x6420000000000000, 0x6590000000000000,
    0x7700000000000000, 0x76B0000000000000, 0x7460000000000000, 0x75D0000000000000,
    0x71C0000000000000, 0x7070000000000000, 0x72A0000000000000, 0x7310000000000000,
    0x7A80000000000000, 0x7B30000000000000, 0x79E0000000000000, 0x7850000000000000,
    0x7C40000000000000, 0x7DF0000000000000, 0x7F20000000000000, 0x7E90000000000000,
    0x5A00000000000000, 0x5BB0000000000000, 0x5960000000000000, 0x58D0000000000000,
    0x5CC0000000000000, 0x5D70000000000000, 0x5FA0000000000000, 0x5E10000000000000,
    0x5780000000000000, 0x5630000000000000, 0x54E0000000000000, 0x5550000000000000,
    0x5140000000000000, 0x50F0000000000000, 0x5220000000000000, 0x5390000000000000,
    0x4100000000000000, 0x40B0000000000000, 0x4260000000000000, 0x43D0000000000000,
    0x47C0000000000000, 0x4670000000000000, 0x44A0000000000000, 0x4510000000000000,
    0x4C80000000000000, 0x4D30000000000000, 0x4FE0000000000000, 0x4E50000000000000,
    0x4A40000000000000, 0x4BF0000000000000, 0x4920000000000000, 0x4890000000000000,
    0xD800000000000000, 0xD9B0000000000000, 0xDB60000000000000, 0xDAD0000000000000,
    0xDEC0000000000000, 0xDF70000000000000, 0xDDA0000000000000, 0xDC10000000000000,
    0xD580000000000000, 0xD430000000000000, 0xD6E0000000000000, 0xD750000000000000,
    0xD340000000000000, 0xD2F0000000000000, 0xD020000000000000, 0xD190000000000000,
    0xC300000000000000, 0xC2B0000000000000, 0xC060000000000000, 0xC1D0000000000000,
    0xC5C0000000000000, 0xC470000000000000, 0xC6A0000000000000, 0xC710000000000000,
    0xCE80000000000000, 0xCF30000000000000, 0xCDE0000000000000, 0xCC50000000000000,
    0xC840000000000000, 0xC9F0000000000000, 0xCB20000000000000, 0xCA90000000000000,
    0xEE00000000000000, 0xEFB0000000000000, 0xED60000000000000, 0xECD0000000000000,
    0xE8C0000000000000, 0xE970000000000000, 0xEBA0000000000000, 0xEA10000000000000,
    0xE380000000000000, 0xE230000000000000, 0xE0E0000000000000, 0xE150000000000000,
    0xE540000000000000, 0xE4F0000000000000, 0xE620000000000000, 0xE790000000000000,
    0xF500000000000000, 0xF4B0000000000000, 0xF660000000000000, 0xF7D0000000000000,
    0xF3C0000000000000, 0xF270000000000000, 0xF0A0000000000000, 0xF110000000000000,
    0xF880000000000000, 0xF930000000000000, 0xFBE0000000000000, 0xFA50000000000000,
    0xFE40000000000000, 0xFFF0000000000000, 0xFD20000000000000, 0xFC90000000000000,
    0xB400000000000000, 0xB5B0000000000000, 0xB760000000000000, 0xB6D0000000000000,
    0xB2C0000000000000, 0xB370000000000000, 0xB1A0000000000000, 0xB010000000000000,
    0xB980000000000000, 0xB830000000000000, 0xBAE0000000000000, 0xBB50000000000000,
    0xBF40000000000000, 0xBEF0000000000000, 0xBC20000000000000, 0xBD90000000000000,
    0xAF00000000000000, 0xAEB0000000000000, 0xAC60000000000000, 0xADD0000000000000,
    0xA9C0000000000000, 0xA870000000000000, 0xAAA0000000000000, 0xAB10000000000000,
    0xA280000000000000, 0xA330000000000000, 0xA1E0000000000000, 0xA050000000000000,
    0xA440000000000000, 0xA5F0000000000000, 0xA720000000000000, 0xA690000000000000,
    0x8200000000000000, 0x83B0000000000000, 0x8160000000000000, 0x80D0000000000000,
    0x84C0000000000000, 0x8570000000000000, 0x87A0000000000000, 0x8610000000000000,
    0x8F80000000000000, 0x8E30000000000000, 0x8CE0000000000000, 0x8D50000000000000,
    0x8940000000000000, 0x88F0000000000000, 0x8A20000000000000, 0x8B90000000000000,
    0x9900000000000000, 0x98B0000000000000, 0x9A60000000000000, 0x9BD0000000000000,
    0x9FC0000000000000, 0x9E70000000000000, 0x9CA0000000000000, 0x9D10000000000000,
    0x9480000000000000, 0x9530000000000000, 0x97E0000000000000, 0x9650000000000000,
    0x9240000000000000, 0x93F0000000000000, 0x9120000000000000, 0x9090000000000000,
]

def crc64(data: bytes) -> int:
    crc = 0
    for b in data:
        crc = CRC64_TABLE[(crc ^ b) & 0xFF] ^ (crc >> 8)
    return crc

def crc64_string(s: str) -> str:
    data = s.encode('utf-8')
    result = crc64(data)
    return f"{result:016x}"  # Return as 16-digit uppercase hex


def hash_string(s: str, is_hash64) -> str:
    if is_hash64:
        return crc64_string(s)
    else:
        return crc32_string(s)

def process():
    base_path = pathlib.Path(".")
    hashed_names = {}

    files = base_path.rglob("*")
    for f in files:
        fn_len = len(f.name)
        if fn_len in (8, 16):
            is_hash64 = fn_len == 16
            is_upper = f.stem.isupper()
            #break

    print(f"reading filelist... (hash64={is_hash64}, upper={is_upper})")

    # hash names from filelist(s)
    for filelist in base_path.glob("*.filelist"):
        with filelist.open("r", encoding="utf-8") as f:
            for line in f:
                original_name = line.strip()
                if not original_name or original_name.startswith('#'):
                    continue
                hashed = hash_string(original_name, is_hash64)
                if is_upper:
                    hashed = hashed.upper()
                hashed_names[hashed] = original_name


    # add precalculated
    if AUTOHASH_SOUNDS and not hashed_names:
        print(f"autohashing names... (hash64={is_hash64}, upper={is_upper})")

        exts = []
        if AUTOHASH_ADD_SBAO:
            exts += ['sbao']
        if AUTOHASH_ADD_SPK:
            exts += ['spk']
        if AUTOHASH_ADD_BAO:
            exts += ['bao']

        prefix = ''
        if AUTOHASH_ADD_PREFIX:
            prefix = "soundbinary\\"
        for i in range(AUTOHASH_NUMBER_MIN, AUTOHASH_NUMBER_MAX):
            for ext in exts:
                calc_name = f"{prefix}{i:08x}.{ext}"
                hashed = hash_string(calc_name, is_hash64)
                if is_upper:
                    hashed = hashed.upper()
                hashed_names[hashed] = calc_name

                if AUTOHASH_ADD_EXTRA_HASHES: 
                    calc_name = f"{prefix}{i + 0x00400000:08x}.{ext}"
                    hashed = hash_string(calc_name, is_hash64)
                    if is_upper:
                        hashed = hashed.upper()
                    hashed_names[hashed] = calc_name

                    calc_name = f"{prefix}{i + 0x80400000:08x}.{ext}"
                    hashed = hash_string(calc_name, is_hash64)
                    if is_upper:
                        hashed = hashed.upper()
                    hashed_names[hashed] = calc_name


    print(f"finding matches...")

    # rename matching files
    files = base_path.rglob("*")
    for file in files:
        if not file.is_file():
            continue

        file_name = file.name
        if not file_name in hashed_names:
            continue

        original_dir = file.parent
        new_relative_path = pathlib.Path(hashed_names[file_name])

        new_path = original_dir / new_relative_path
        new_path.parent.mkdir(parents=True, exist_ok=True)

        file.rename(new_path)
        #print(f"Renamed {file.name} to {new_path.name}")


if __name__ == "__main__":
    process()
